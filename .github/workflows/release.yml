name: Publish to npm

on:
  push:
    branches: [ main ]
    paths:
      - 'package.json'
      - 'bin/**'
      - 'src/auth/**'
      - 'scripts/**'
  workflow_dispatch:

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@yousourceinc'

      - name: Install dependencies
        run: npm ci || npm install

      - name: Check if version is already published
        id: check_version
        run: |
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          
          if npm view "$PACKAGE_NAME@$PACKAGE_VERSION" --registry=https://npm.pkg.github.com 2>/dev/null; then
            echo "Version $PACKAGE_VERSION already published"
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "Version $PACKAGE_VERSION not published yet"
            echo "skip=false" >> $GITHUB_OUTPUT
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to GitHub Packages
        if: steps.check_version.outputs.skip == 'false'
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          
          # Check if version contains prerelease identifiers
          if echo "$PACKAGE_VERSION" | grep -qE '\-(alpha|beta|rc|fork|dev|pre)'; then
            # Extract the prerelease tag (e.g., "fork" from "0.4.1-fork.1")
            TAG=$(echo "$PACKAGE_VERSION" | sed -E 's/.*-(alpha|beta|rc|fork|dev|pre).*/\1/')
            echo "Publishing prerelease version with tag: $TAG"
            npm publish --tag "$TAG"
          else
            echo "Publishing stable version"
            npm publish
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Summary
        if: steps.check_version.outputs.skip == 'false'
        run: |
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          echo "âœ… Successfully published $PACKAGE_NAME@$PACKAGE_VERSION to GitHub Packages"
          echo ""
          echo "Install with:"
          echo "npm install $PACKAGE_NAME@$PACKAGE_VERSION"
